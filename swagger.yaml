openapi: 3.0.3
info:
  title: Mika Drive 1.0
  description: |-
    
    API for managing contact forms, quote requests, blog content, and administrator authentication for the Mika Drive chauffeur service agency website. This API provides several key features:

    - Sending messages to the agency support through a contact form.
    - Requesting quotes via a dedicated form.
    - Retrieving blog articles through the GraphQL API.
    - Administrator authentication to access the admin interface.

    The API is designed to facilitate interactions between users and the Mika Drive agency, providing a seamless and intuitive experience.
  contact:
    email: support@am-digital.fr
  version: 1.0.0
servers:
  - url: https://api.mika-drive.com/api
  - url: https://localhost:3000/api


tags:
  - name: auth
    description: User authentification
  - name: user
    description: Operations about user
  - name: contact
    description: Operations about contact
  - name: blog
    description: Operations about blog
  - name: quote
    description: Operations about quote


paths:
  /user/auth/register:
    post:
      tags:
        - auth
      summary: Set password for new user
      description: Set a new user password
      operationId: fristLogin
      security: []
      requestBody:
        $ref: '#/components/requestBodies/UserFirstPassword'  
        
      responses:
        '200':
          description: successful operation                
        '400':
          description: Invalid user supplied, verify that password match the requirements, or that the user does not exist    
        '500':
          description: server error
        
        
  /user/auth/login:
    post:
      tags:
        - auth
      summary: 'Login as a user'
      description: 'This operation allows users to identify themselves via the login interface.'
      operationId: loginUser
      security: []
      requestBody:
        $ref: '#/components/requestBodies/Login'

            
      responses:
        '200':
          description: login successful
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jwtToken'
          
        '400':
          description: Invalid username/password supplied
  /user/auth/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user
      description: This operation allows users to be logged out.
      operationId: logoutUser
      security: []
      parameters: []
      responses:
        '200':
          description: successful operation

  /user:
    get:
      tags:
        - user
      summary: Get all users
      description: ''
      security:
        - jwt: []
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '404':
          description: Users not found
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      security:
        - jwt: []
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: 'Id that needs to be fetched.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
          example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user by id
      description: This can only be done by the logged in user. Only by admin
      security:
        - jwt: []
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: Id that need to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
          example: 1
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
        '403':
          description: Forbidden
    delete:
      tags:
        - user
      summary: Delete user by id
      description: This can only be done by the logged in user. Only by admin
      operationId: deleteUser
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          description: Id that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
          example: 1
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
        '403':
          description: Forbidden
  /contact:
    post:
      tags:
        - contact
      summary: Post contact form data
      description: This operation allows storing contact form data in the database. An e-mail will then be sent to the configured recipient.
      operationId: storeContactFormData
      security: []
      requestBody:
        description: Store contact object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contact"
      responses:
        '200':
          description: Opération réussie
  /blog:
    get:
      tags:
        - blog
      summary: 'Get all articles'
      description: 'This operation allows you to retrieve all the blog''s articles and call Hygraph via the GraphQL API.'
      operationId: getPosts
      security: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: 'List of post object'
                additionalProperties: false
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        datePublished:
                          type: string
                          format: date-time
                        slug:
                          type: string
                        content:
                          type: object
                          additionalProperties: false
                          properties:
                            html:
                              type: string
                        author:
                          type: object
                          additionalProperties: false
                          properties:
                            name:
                              type: string
                            avatar:
                              type: object
                              additionalProperties: false
                              properties:
                                url:
                                  type: string
                        coverPhoto:
                          type: object
                          additionalProperties: false
                          properties:
                            url:
                              type: string
                    
        '400':
          description: 'Hygraph does not respond'
  /blog/{id}:
    get:
      tags:
        - blog
      summary: 'Get an post by id'
      description: 'This operation allows you to retrieve a article by id and call Hygraph via the GraphQL API.'
      operationId: getPost
      security: []
      parameters:
        - name: id
          in: path
          description: 'Id that needs to be fetched.'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: 'Post object'
                additionalProperties: false
                properties:
                  post:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      datePublished:
                        type: string
                        format: date-time
                      slug:
                        type: string
                      content:
                        type: object
                        properties:
                          html:
                            type: string
                      author:
                        type: object
                        properties:
                          name:
                            type: string
                          avatar:
                            type: object
                            additionalProperties: false
                            properties:
                              url:
                                type: string
                      coverPhoto:
                        type: object
                        properties:
                          url:
                            type: string
        '400':
          description: 'Hygraph does not respond'

  /quote:
    post:
      tags:
        - quote
      summary: Post contact form data
      description: This operation allows storing quote form data in the database.
      operationId: storeQuoteFormData
      security: []
      requestBody:
        description: Store quote object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Quote"
      responses:
        '200':
          description: Opération réussie
        '5XX':
          description: 'Internal error'

components:
  schemas:
    
    Contact:
      type: object
      description: 'Represent a contact form from a client'
      allOf:
        - $ref:  '#/components/schemas/ClientInfo'
      properties:
        subject:
          type: string
          example: "Lorem ipsum"
          maxLength: 255
        description:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
          maxLength: 1000

    Quote:
      type: object
      description: 'Represent a quote form from a client'
      allOf:
        - $ref:  '#/components/schemas/ClientInfo'
      properties:
        placeOfCare:
          type: string
          example: "15 rue de la République, 69140 Rillieux-la-Pape"
        destination:
          type: string
          example: "92 Bd Niels Bohr, 69100 Villeurbanne"
        typeOfTrip:
          type: string
          example: "Aller-simple"
        departureDate:
          type: string
          format: date
          example: '2022-01-01'
          pattern: ^[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])$
          minLength: 10
          maxLength: 10
          x-42c-format: o:date
        typeOfCar:
          type: string
          example: "Berline"
        hour:
          type: integer
          format: int64
          example: 12
        minutes:
          type: integer
          format: int64
          example: 50
        numberOfPassengers:
          type: integer
          format: int64
          example: 3
        numberOfBags:
          type: integer
          format: int64
          example: 3
        furtherInformations:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit."

    User:
      type: object
      description: 'Represent a single user of the backoffice, can be a accountant or an admin'
      additionalProperties: false
      allOf:
        - $ref: '#/components/schemas/UserId'
        - $ref: '#/components/schemas/Mail'
        - $ref: '#/components/schemas/UserStatus'
    
    UserList:
      type: array
      description: 'List of user object'
      items:
        $ref: '#/components/schemas/User'

    

    TemporaryTokenForPassword:
      type: object
      description: 'Temporary token'
      properties:
        token:
          type: string
          minLength: 128
          maxLength: 128
          example: 'ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff'

    jwtToken:
      type: object
      description: 'jwt token'
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE3MDE2MzQxMTgsInVzZXJfaWQiOjF9.w6teBiyYvjkOH5YisTzDPgGuP-LxVtX6s9M6bgHuy6s'

    UserStatus:
      type: object
      description: 'User status 0 nothing 1 admin'
      properties:
        userStatus:
          type: integer
          description: User Status
          format: unt32
          example: 1
    
    UserId:
      type: object
      description: 'User id'
      properties:
        id:
          type: integer
          format: int64
          example: 1
    
    Mail:
      type: object
      description: 'User mail'
      properties:
        mail:
          type: string
          example: john@email.com
          maxLength: 256
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    Password:
      type: object
      description: 'User password lenght 8 lenght 1 upper 1 lower 1 number'
      properties:
        password:
          type: string
          example: 'hYjdkt2876'
          maxLength: 32
          pattern: '^.{8,}$'
    
    ClientInfo:
      type: object
      description: 'Client basic infromation'
      allOf:
          - $ref: '#/components/schemas/Mail'
      properties:
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        phone:
          type: string
          example: "0701020304"
        


  requestBodies:
    Login:
      description: 'User login'
      content:
        application/json:
          schema:
            additionalProperties: false
            required:
              - mail
              - password
            allOf:
              - $ref: '#/components/schemas/Mail'
              - $ref: '#/components/schemas/Password'

    UserFirstPassword:
      description: 'Allow the user to set he s first password from a token'
      content:
        application/json:
          schema:
            additionalProperties: false
            required:
              - temporaryToken
              - password
              - id
            allOf:
              - $ref: '#/components/schemas/UserId'
              - $ref: '#/components/schemas/Password'
              - $ref: '#/components/schemas/TemporaryTokenForPassword'
  securitySchemes:
    jwt:
      description: 'JWT Authorization header using the Bearer scheme'
      type: apiKey
      in: header
      name: Authorization
  
